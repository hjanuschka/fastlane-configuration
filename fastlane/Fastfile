# Fix the fastlane version so that we don't get any surprises while deploying.
fastlane_version '1.48.0'

#############################
### Environment variables ###
#############################

# The environment variables below can also be setup in Jenkins. If so the lines below
# don't have to be set in this Fastfile.

# You have to set your iTunes Connect username and password in order to authenticate
# with Apple's iTunes Connect portal so you can upload the build to TestFlight.
ENV['PILOT_USERNAME'] = 'Your iTunes Connect username'
ENV['PILOT_PASSWORD'] = 'Your iTunes Connect password'

# You have to set the HockeyApp token in order to authenticate with HockeyApp.
ENV['FL_HOCKEY_API_TOKEN'] = 'Your HockeyApp API token'

# The Splunk environment variables to authenticate.
ENV['FL_SPLUNKMINT_API_KEY'] = 'Your Splunk API key'
ENV['FL_SPLUNKMINT_API_TOKEN'] = 'Your Splunk API token'

# The incoming webhook for our iCapps Slack account.
ENV['SLACK_URL'] = 'https://hooks.slack.com/services/...'

# You have to set your iTunes Connect username and password in order to authenticate
# with Apple's iTunes Connect portal. This will usually be the same as your PILOT
# credentials.
ENV['FASTLANE_USERNAME'] = ENV['PILOT_USERNAME']
ENV['FASTLANE_PASSWORD'] = ENV['PILOT_PASSWORD']

###############
### CI LANE ###
###############

lane :ci do
  @configuration = "Accept"

  properties # Set the right properties
  build      # Run the build lane.
  tests      # Run the tests lane.
end

###################
### HOCKEY LANE ###
###################

lane :hockey do
  @configuration = "Release"

  properties   # Set the right properties
  bump_version # Run the bump_version lane.
  build        # Run the build lane.
  tests        # Run the tests lane.

  # Upload the application to HockeyApp. You can find more information on the used keys
  # below in the HockeyApp documentation.
  # (http://support.hockeyapp.net/kb/api/api-versions#upload-version)
  hockey(
    notes:     'What\'s new?',                  # optional, will be empty otherwise
    tags:      'tags, on, hockey',              # optional, will be empty otherwise
    notify:    '1'                              # optional, will be 0 otherwise
  )
end

#######################
### TESTFLIGHT LANE ###
#######################

lane :testflight do
  @configuration = "Production"

  properties # Set the right properties
  bump_version # Run the bump_version lane.
  build        # Run the build lane.
  tests        # Run the tests lane.

  # Upload the application to Apple's Testflight.
  pilot(
    app_identifier:  @app_identifier,
    skip_submission: true                             # Don't automagically submit for review.
  )

  # Upload the dSYM to Splunk.
  splunkmint
end

#####################
### PRIVATE LANES ###
#####################

private_lane :build do
  # Build the application.
  gym(
    workspace:             @workspace,     # optional, the workspace to build.
    scheme:                @scheme,        # optional, the scheme to build.
    configuration:         @configuration,      # optional, the configuration to build.
    clean:                 true,           # optional, Clean the project before building.
    use_legacy_build_api:  true,           # Needs to be set, because of a open radar.
  )
end

private_lane :tests do
  # Run the application tests.
  scan(
    workspace:     @workspace,                                   # optional, the workspace to build.
    scheme:        @scheme,                                      # optional, the scheme to build.
  )
end

private_lane :bump_version do
  # Increment the build version number, commit the bump and push the tag.
  increment_build_number
  commit_version_bump
  add_git_tag
  push_to_git_remote
end

# Configure the properties.
private_lane :properties do
  @workspace = 'Project.xcworkspace'
  @scheme = 'Application Scheme'
  @app_identifier = 'com.icapps.app'
end

private_lane :fetch_translations do
  update_translations(
    project_root:   './location/of/project/root', # optional, the directory where the .translations file resides.
    commit_message: 'Your custom commit message'  # optional, your custom commit message.
  )
end

#################
### Callbacks ###
#################

# Post a notification to Slack every time a lane was successful.
after_all do |lane|
  slack(
    message:          '#{lane[:name]} did run successful',
    channel:          '#slack-room',
    success:           true
    default_payloads: [:lane, :test_result]
  )
  clean_build_artifacts
end

# When an error occurs we post a failure notification to Slack.
error do |lane, exception|
  slack(
    message:          exception.message,
    channel:          '#slack-room',
    success:           false
    default_payloads: [:lane, :test_result]
  )
  clean_build_artifacts
end
